---
title: Assignment 1 (solution)
scripts:
  - highlight
---
## Problem 1 {-}

We first observe a simplification that can be done for this model, which makes
the calculations a little easier. In principle, we need to compute
$$ Q(s,a) = \EXP[ c(s,a,W) | S = s] = 
\sum_{w \in \ALPHABET W} P(W = w | S = s) c(s,a,w). $$

This means that we need to compute $P(W|S)$. However, we can avoid that step
by observing that 
$$P(W|S) = \dfrac{ P(S,W) }{ P(S) }.$$
Thus,
$$ Q(s,a) = \dfrac{1}{P(S)} \sum_{w \in \ALPHABET W} P(S = s, W = w)
c(s,a,w).$$
The $1/P(S)$ term outside does not impact the arg min, so we can ignore that
when computing the optimal policy. 

The code for computing the optimal policy is shown below.
Note that the code is written for ease of reading, not efficiency. It can be made
more efficient by replace the for loops by matrix multiplication.

<iframe width="100%" height="700px"
src="https://replit.com/@adityam17/Assignment-1-Problem-1?lite=true"
scrolling="no" frameborder="no" allowtransparency="true"
allowfullscreen="true" sandbox=
"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe>

<!--
{{% code file="content/solutions/01/static.jl" language="julia" %}}
--> 

The optimal policy is as follows (you can compute it by clicking the green
arrow on top of the code listing)

```
┌ Info: The optimal actions are
│   π =
│    2-element Array{Int64,1}:
│     3
└     2
```

## Problem 2 {-}

We solve it in a manner similar to Problem 1. The code for computing the
optimal policy is shown below.

<iframe width="100%" height="700px"
src="https://replit.com/@adityam17/Assignment-1-Problem-2?lite=true"
scrolling="no" frameborder="no" allowtransparency="true"
allowfullscreen="true" sandbox=
"allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals"></iframe>


<!--
{{% code file="content/solutions/01/static-2.jl" language="julia" %}}
-->

The optimal policy is as follows. 

```
┌ Info: The optimal actions are
│   π =
│    2×2 Array{Int64,2}:
│     3  3
└     2  1
```

Note that the optimal action depends on the value of $Y$. Thus, we cannot
ignore $Y$. The reason is that $Y$ is not conditionally independent of $W$
given $S$. In particular, 

$$ P(W = 1 | S = 1, Y = 1) = 
  \dfrac { P(S = 1, W = 1, Y = 1) } 
  { \sum_{w \in \ALPHABET W} P(S = 1, W = w, Y = 1) }
$$
which can be computed as (you can also copy paste and run this in the REPL
above)

```
julia> P[1,1,1]/sum(P[1,:,1])
0.6
```

Similarly, 
$$ P(W = 1 | S = 1) = 
  \dfrac { \sum_{w \in \ALPHABET W}  P(S = 1, W = w, Y = 1) } 
  { \sum_{y \in \ALPHABET Y} \sum_{w \in \ALPHABET W} P(S = 1, W = w, Y = y) }
$$
which can be computed as
```
julia> sum(P[1,:,1])/sum(P[1,:,:])
0.5555555555555556
```

Therefore $P(W | S, Y) \neq P(W | S)$ and hence Blackwell's principle of
irrelevant information is not applicable.

## Problem 3 (Selling random wind) {-}

The total expected cost of action $a$ is given by
$$ J(a) = pa - \int_{0}^a q(a-w) f(w) dw. $$

Using Leibniz rule, we get

$$ \dfrac{ dJ(a) } { da } = p + q(a - a) f(a) - \int_{0}^a q f(w) dw 
  = p - q F(a). 
$$

Furthermore,
$$
  \dfrac{ d^2 J(a) } {da^2} = -q f(a) \le 0.
$$
Hence, $J$ is concave and we can compute the maximizing action by setting
$dJ(a) / du = 0$:
$$  
  F(a) = \dfrac{p}{c} 
  \implies
  a = F^{-1}\left( \dfrac{p}{q} \right).
$$

