---
title: Assignment 3 (solution)
scripts:
  - highlight
---

## Problem 1

The code for computing the optimal policy is [available here](queueing.jl).
The code is written for ease of reading, not efficiency. 

{{% code file="content/solutions/03/queueing.jl" language="julia" %}}

The value functions are shown below.

![][queueing]

The optimal policy at the corresponding times is:


```
┌ Info: Optimal policy
│   [g[1], g[50], g[75], g[95]] =
│    4-element Array{Array{Int64,1},1}:
│     [0, 2, 3, 3, 3, 3, 3, 2, 1]
│     [0, 2, 3, 3, 3, 3, 2, 2, 1]
│     [0, 2, 2, 2, 2, 2, 2, 1, 1]
└     [0, 1, 1, 1, 1, 1, 1, 1, 1]
```

[queueing]: queueing.png { width=100% }

## Problem 2

The code for computing the optimal policy is [available here](iot.jl). Note
that we save a lot of explicit calculations by comuting the probability of
landing in a bin in terms of differences of CDFs rather than an integral of
the PDF.

{{% code file="content/solutions/03/iot.jl" language="julia" %}}

The value functions are shown below:

![][iot]

[iot]: iot.png { width=100% }
