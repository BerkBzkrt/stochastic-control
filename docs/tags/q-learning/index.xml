<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Q-learning on ECSE 506: Stochastic Control and Decision Theory</title>
    <link>https://adityam.github.io/stochastic-control/tags/q-learning/</link>
    <description>Recent content in Q-learning on ECSE 506: Stochastic Control and Decision Theory</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://adityam.github.io/stochastic-control/tags/q-learning/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Theory: Q-learning</title>
      <link>https://adityam.github.io/stochastic-control/rl/q-learning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://adityam.github.io/stochastic-control/rl/q-learning/</guid>
      <description>Consider an MDP with finite state space \(\ALPHABET S\) and action space \(\ALPHABET A\), where \(|\ALPHABET S| = n\) and \(|\ALPHABET A| = m\). Recall the value iteration algorithm for infinite horizon MDPs. We start with an arbitrary initial \(V_0\) and then recursively compute \(V_{k+1} = \mathcal B V_k\). We first observe that the value iteration can be written in terms of the \(Q\)-function rather than the value function as follows: start with an arbitrary initial \(Q_0\) and the recursively compute \[ \begin{equation} \label{eq:Q} Q_{k+1}(s,a) = c(s,a) + Î³ \sum_{s&amp;#39; \in \ALPHABET S} P_{ss&amp;#39;}(a) \min_{a&amp;#39; \in \ALPHABET A} Q_k(s&amp;#39;,a&amp;#39;), \qquad s \in \ALPHABET S, a \in \ALPHABET A, k \ge 0 \end{equation} \]</description>
    </item>
    
  </channel>
</rss>
